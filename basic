#!/usr/bin/bash

MEGABYTE=1024

freemem () {
local intermediateValue
local returnValue
intermediateValue=$(awk 'FNR==2{print $2}' /proc/meminfo)
if [ $? -eq 0 ]
then
        returnValue=$((intermediateValue / MEGABYTE))
        echo "The amount of free memory available is: $returnValue megabytes." 
        exit 0
else
        echo -e "The bash command /'awk/' failed to execute."
        exit 1
fi
}

diskfree () {
local returnValue
returnValue=$(df -h 2>/dev/null | awk  '{print $1"\t\t" $4"\t"}' | column -t; exit ${PIPESTATUS[0]})
if [ $? -eq 0 ]
then
        echo "$returnValue" | more
        exit 0
else
        echo -e "The bash command /'df/' failed to execute."
        exit 1
fi
}

quotacheck () {
local returnValue
returnValue=$(quota -ws 2>/dev/null | awk '{print $1"\t\t" $7"\t"}' | column -t; exit ${PIPESTATUS[0]})
if [ $? -eq 0 ]
then
        echo "$returnValue"
        exit 0

else
        echo -e "The bash command /'quota/' failed to execute."
        exit 1

fi
}

groupscheck () {
local returnValue
returnValue=$(groups | awk '$1=$1' FS=" " OFS="\n"; exit ${PIPESTATUS[0]]})
if [ $? -eq 0 ]
then
        echo "$returnValue" | more
        exit 0
else
        echo -e "The bash command /'groups/' failed to execute."
        exit 1
fi
}

historycheck () {
local returnValue
returnValue=$(cat ~/.bash_history || exit 1)
if [ $? -eq 0 ]
then
        echo "$returnValue" | less
        exit 0
else
    
        exit 1
fi
}

if [[ $# -eq 0 || $# -gt 1 ]]
then
        echo 'Error: the script requires exactly ONE argument.'
        exit 0
fi

SELECTED_OPTION=$1

case $SELECTED_OPTION in
        "freemem") freemem;;
        "diskfree") diskfree;;
        "quota") quotacheck;;
        "groups") groupscheck;;
        "history") historycheck;;
esac
