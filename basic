#!/bin/bash


#************************************************#
#                    basic                       #
#           written by Duane McMahon             #
#             Student Id: s3116979               #
#                                                #
# Reports on aspects of the state of the system  #
#************************************************#

MEGABYTE=1024
SELECTED_OPTION=$1

# ------------------------------------------------------------ #
# freemem ()                                                   #
# displays the amount of free memory available on the system.  #
# Parameter:                                                   #
# Returns: 0 on success, 1 if something went wrong.            #
# -------------------------------------------------------------#

freemem () {
local intermediateValue
local returnValue
intermediateValue=$(awk 'FNR==2{print $2}' /proc/meminfo)
if [ "$intermediateValue" ]
then
        returnValue=$((intermediateValue / MEGABYTE))
        echo "The amount of free memory available is: $returnValue megabytes." 
        exit 0
else
        echo -e "The bash command /'awk/' failed to execute."
        exit 1
fi
}

# ------------------------------------------------------------ #
# diskfree ()                                                  #
# displays the amount of disk space free on each partition     #
# Parameter:                                                   #
# Returns: 0 on success, 1 if something went wrong.            #
# -------------------------------------------------------------#

diskfree () {
local returnValue
returnValue=$(df -h 2>/dev/null | awk  '{print $1"\t\t" $4"\t"}' | column -t)
if [ "${PIPESTATUS[0]}" -eq 0 ]
then
        echo "$returnValue" | more
        exit 0
else
        echo -e "The bash command /'df/' failed to execute."
        exit 1
fi
}

# ------------------------------------------------------------ #
# quotacheck ()                                                #
# displays the disk quota for the current user                 #
# Parameter:                                                   #
# Returns: 0 on success, 1 if something went wrong.            #
# -------------------------------------------------------------#

quotacheck () {
local returnValue
returnValue=$(quota -ws 2>/dev/null | awk '{print $1"\t\t" $7"\t"}' | column -t)
if [ "${PIPESTATUS[0]}" -eq 0 ]
then
        echo "$returnValue"
        exit 0

else
        echo -e "The bash command /'quota/' failed to execute."
        exit 1

fi
}

# ------------------------------------------------------------ #
# groupscheck ()                                               #
# displays the groups that the current user is a member of     #
# Parameter:                                                   #
# Returns: 0 on success, 1 if something went wrong.            #
# -------------------------------------------------------------#

groupscheck () {
local returnValue
returnValue=$(groups | awk '$1=$1' FS=" " OFS="\n")
if [ "${PIPESTATUS[0]}" -eq 0 ]
then
        echo "$returnValue" | more
        exit 0
else
        echo -e "The bash command /'groups/' failed to execute."
        exit 1
fi
}

# ------------------------------------------------------------ #
# historycheck ()                                              #
# displays a history of the commands entered into the          #
# 'current'shell. Please see note 2) in the readme.txt         #
# Parameter:                                                   #
# Returns: 0 on success, 1 if something went wrong.            #
# -------------------------------------------------------------#

historycheck () {
local returnValue
returnValue=$(cat ~/.bash_history)
if [ "$returnValue" ]
then
        echo "$returnValue" | less
        exit 0
else
    
        exit 1
fi
}

if [[ $# -eq 0 || $# -gt 1 ]]
then
        echo 'Error: the script requires exactly ONE argument.'
        exit 0
fi

case $SELECTED_OPTION in
        "freemem") freemem;;
        "diskfree") diskfree;;
        "quota") quotacheck;;
        "groups") groupscheck;;
        "history") historycheck;;
esac
